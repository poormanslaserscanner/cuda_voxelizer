Readme.md
- Performance (using schwarz algorithm, against binvox)
- Switch to cuda libs for helper

- estimate block/grid size
- optimize, output to magicavoxel? Png? interact with polyvox?
- is magicbits faster (less memory lookup)

### VOXELISATION
- Cleanup writeout to binvox, use original file name, append gridsize (see ooc_svo_builder)

OPTIMIZATIONS
- model bbox can be computed in GPU pass
- buffered bitset (no speedup)

WILL THIS GO FASTER
- Don't copy triangles over, copy faces table and vertex table (less memory transfer, more work/triangle on GPU)
- What if we're using cudaMallocManaged?
- Difference between hostalloc + memcpy and hostalloc+(DMA transfers)
- Texture for triangles?
- Surface for voxelisation table?

VOXEL TABLE
- Variable size queue voor gevonden voxels? (hoe werkt dat in CUDA?) (zie stack overflow question)
- Implementeren als hashmap+ telkens memory bij alloceren bij element toevoegen aan lijst, spinlock

THRUST
- Implement whole thing as thrust vector sort
- Or do a counting step first (cfr. Voxelpipe code)

### OCTREE BUILDING
- Counting step, write offsets, parallel scan (lopende som) = length+offsets
- Allocate and write morton codes into it
- Allocate and initialize nodes

(higher levels: strip morton codes)
(parallel scan / exclusive scan : CUDPP / Thrust)